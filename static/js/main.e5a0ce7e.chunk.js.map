{"version":3,"sources":["Home/index.js","Payment/constants.js","Payment/index.js","Payment/utils.js","PaymentResult/index.js","Certification/index.js","CertificationResult/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","Object","taggedTemplateLiteral","ButtonContainer","_templateObject2","withRouter","_ref","history","react_default","a","createElement","es_button","onClick","push","icon","type","PGS","value","label","METHODS","METHODS_FOR_INICIS","concat","METHODS_FOR_UPLUS","METHODS_FOR_KCP","METHODS_FOR_MOBILIANS","METHODS_FOR_DANAL","METHOD_FOR_CARD","METHOD_FOR_PHONE","METHOD_FOR_VBANK","QUOTAS","QUOTAS_FOR_INICIS_AND_KCP","Item","es_form","Option","es_select","Payment_templateObject","Header","Payment_templateObject2","FormContainer","_templateObject3","PaymentForm","create","name","form","ua","_useState","useState","_useState2","slicedToArray","methods","setMethods","_useState3","_useState4","quotas","setQuotas","_useState5","_useState6","isQuotaRequired","setIsQuotaRequired","_useState7","_useState8","isDigitalRequired","setIsDigitalRequired","_useState9","_useState10","isVbankDueRequired","setIsVbankDueRequired","_useState11","_useState12","isBizNumRequired","setisBizNumRequired","getFieldDecorator","validateFieldsAndScroll","setFieldsValue","getFieldsValue","callback","response","query","queryString","stringify","handleQuotas","pg","pay_method","_getQuotas","method","getQuotas","card_quota","Payment_Wrapper","onSubmit","e","preventDefault","error","values","merchant_uid","amount","buyer_name","buyer_tel","buyer_email","escrow","biz_num","vbank_due","digital","data","mobile","params","userCode","paramsToString","JSON","window","ReactNativeWebView","postMessage","IMP","init","request_pay","initialValue","size","onChange","getMethods","suffixIcon","map","key","quota","rules","required","message","input","addonBefore","placeholder","className","valuePropName","es_switch","Date","getTime","htmlType","withUserAgent","PaymentResult_templateObject","Container","PaymentResult_templateObject2","props","colorType","search","location","parse","error_msg","imp_uid","isSuccessed","success","imp_success","getIsSuccessed","iconType","resultType","PaymentResult_Wrapper","theme","Certification_templateObject","Certification_templateObject2","Certification_templateObject3","CertificationForm","Certification_Wrapper","Certification_Header","Certification_FormContainer","phone","min_age","certification","Certification_Item","CertificationResult_templateObject","CertificationResult_templateObject2","CertificationResult_Wrapper","CertificationResult_Container","App","react_router_dom","react_router","exact","path","component","Home","Payment","PaymentResult","Certification","CertificationResult","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5a0ce7e.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Icon } from \"antd\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction Home({ history }) {\n    return (\n        <Wrapper>\n            <div>\n                <h2>진필 웹뷰 테스트</h2>\n                <h4>진필 웹뷰 테스트 화면입니다.</h4>\n                <h4>\n                    아래 버튼을 눌러 결제 또는 본인인증 테스트를 진행해주세요.\n                </h4>\n            </div>\n            <div></div>\n            <ButtonContainer>\n                <Button onClick={() => history.push(\"/payment\")}>\n                    <Icon type=\"credit-card\" />\n                    결제 테스트\n                </Button>\n                <Button onClick={() => history.push(\"/certification\")}>\n                    <Icon type=\"user\" />\n                    본인인증 테스트\n                </Button>\n            </ButtonContainer>\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n\n    > div {\n        position: absolute;\n        left: 0;\n        right: 0;\n    }\n    > div:first-child {\n        background-color: #344e81;\n        top: 0;\n        bottom: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        > * {\n            color: #fff;\n        }\n\n        h4 {\n            margin: 0;\n            line-height: 1.5;\n        }\n    }\n    > div:nth-child(2) {\n        top: 50%;\n        bottom: 0;\n    }\n`;\n\nconst ButtonContainer = styled.div`\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    top: 50%;\n    margin-top: -5rem;\n\n    button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        height: 10rem;\n        width: 15rem;\n        margin: 0 0.5rem;\n        border: none;\n        box-shadow: 0 0 1rem 0 rgba(0, 0, 0, 0.13);\n        .anticon {\n            margin-bottom: 0.5rem;\n            font-size: 2rem;\n            & + span {\n                margin: 0;\n            }\n        }\n    }\n`;\n\nexport default withRouter(Home);\n","export const PGS = [\n  {\n    value: 'html5_inicis',\n    label: '웹 표준 이니시스',\n  },\n  {\n    value: 'kcp',\n    label: 'NHN KCP',\n  },\n  {\n    value: 'kcp_billing',\n    label: 'NHN KCP 정기결제',\n  },\n  {\n    value: 'uplus',\n    label: 'LG 유플러스',\n  },\n  {\n    value: 'jtnet',\n    label: 'JTNET',\n  },\n  {\n    value: 'nice',\n    label: '나이스 정보통신',\n  },\n  {\n    value: 'kakaopay',\n    label: '신 - 카카오페이',\n  },\n  {\n    value: 'kakao',\n    label: '구 - LG CNS 카카오페이',\n  },\n  {\n    value: 'danal',\n    label: '다날 휴대폰 소액결제',\n  },\n  {\n    value: 'danal_tpay',\n    label: '다날 일반결제',\n  },\n  {\n    value: 'kicc',\n    label: '한국정보통신',\n  },\n  {\n    value: 'paypal',\n    label: '페이팔',\n  },\n  {\n    value: 'mobilians',\n    label: '모빌리언스',\n  },\n  {\n    value: 'payco',\n    label: '페이코',\n  },\n  {\n    value: 'settle',\n    label: '세틀뱅크 가상계좌',\n  },\n  {\n    value: 'naverco',\n    label: '네이버 체크아웃',\n  },\n  {\n    value: 'naverpay',\n    label: '네이버페이',\n  },\n  {\n    value: 'smilepay',\n    label: '스마일페이',\n  },\n];\n\nexport const METHODS = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n  {\n    value: 'vbank',\n    label: '가상계좌',\n  },\n  {\n    value: 'trans',\n    label: '실시간 계좌이체',\n  },\n  {\n    value: 'phone',\n    label: '휴대폰 소액결제'\n  },\n];\n\nexport const METHODS_FOR_INICIS =\n  METHODS.concat([\n    {\n      value: 'samsung',\n      label: '삼성페이',\n    },\n    {\n      value: 'kapy',\n      label: 'KPAY',\n    },\n    {\n      value: 'cultureland',\n      label: '문화상품권',\n    },\n    {\n      value: 'smartculture',\n      label: '스마트문상',\n    },\n    {\n      value: 'happymoney',\n      label: '해피머니',\n    },\n  ]);\n\nexport const METHODS_FOR_UPLUS =\n  METHODS.concat([\n    {\n      value: 'cultureland',\n      label: '문화상품권',\n    },\n    {\n      value: 'smartculture',\n      label: '스마트문상',\n    },\n    {\n      value: 'booknlife',\n      label: '도서상품권',\n    },\n  ]);\n\nexport const METHODS_FOR_KCP =\n  METHODS.concat([\n    {\n      value: 'samsung',\n      label: '삼성페이',\n    },\n  ]);\n\nexport const METHODS_FOR_MOBILIANS = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n  {\n    value: 'phone',\n    label: '휴대폰 소액결제',\n  },\n];\n\nexport const METHODS_FOR_DANAL = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n  {\n    value: 'vbank',\n    label: '가상계좌',\n  },\n  {\n    value: 'trans',\n    label: '실시간 계좌이체',\n  },\n];\n\nexport const METHOD_FOR_CARD = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n];\n\nexport const METHOD_FOR_PHONE = [\n  {\n    value: 'phone',\n    label: '휴대폰 소액결제',\n  },\n];\n\nexport const METHOD_FOR_VBANK = [\n  {\n    value: 'vbank',\n    label: '가상계좌',\n  },\n];\n\nexport const QUOTAS = [\n  {\n    value: 0,\n    label: 'PG사 기본 제공',\n  },\n  {\n    value: 1,\n    label: '일시불',\n  },\n];\n\nexport const QUOTAS_FOR_INICIS_AND_KCP = [\n  {\n    value: 0,\n    label: 'PG사 기본 제공',\n  },\n  {\n    value: 1,\n    label: '일시불',\n  },\n  {\n    value: 2,\n    label: '2개월',\n  },\n  {\n    value: 3,\n    label: '3개월',\n  },\n  {\n    value: 4,\n    label: '4개월',\n  },\n  {\n    value: 5,\n    label: '5개월',\n  },\n  {\n    value: 6,\n    label: '6개월',\n  },\n];\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Form, Select, Icon, Input, Switch, Button } from \"antd\";\nimport { withRouter } from \"react-router-dom\";\nimport { withUserAgent } from \"react-useragent\";\nimport queryString from \"query-string\";\n\nimport {\n    PGS,\n    METHODS_FOR_INICIS,\n    QUOTAS_FOR_INICIS_AND_KCP,\n} from \"./constants\";\nimport { getMethods, getQuotas } from \"./utils\";\n\nconst { Item } = Form;\nconst { Option } = Select;\n\nfunction Payment({ history, form, ua }) {\n    const [methods, setMethods] = useState(METHODS_FOR_INICIS);\n    const [quotas, setQuotas] = useState(QUOTAS_FOR_INICIS_AND_KCP);\n    const [isQuotaRequired, setIsQuotaRequired] = useState(true);\n    const [isDigitalRequired, setIsDigitalRequired] = useState(false);\n    const [isVbankDueRequired, setIsVbankDueRequired] = useState(false);\n    const [isBizNumRequired, setisBizNumRequired] = useState(false);\n    const {\n        getFieldDecorator,\n        validateFieldsAndScroll,\n        setFieldsValue,\n        getFieldsValue,\n    } = form;\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        validateFieldsAndScroll((error, values) => {\n            if (!error) {\n                /* 가맹점 식별코드 */\n                const userCode = \"imp19424728\";\n                /* 결제 데이터 */\n                const {\n                    pg,\n                    pay_method,\n                    merchant_uid,\n                    name,\n                    amount,\n                    buyer_name,\n                    buyer_tel,\n                    buyer_email,\n                    escrow,\n                    card_quota,\n                    biz_num,\n                    vbank_due,\n                    digital,\n                } = values;\n\n                const data = {\n                    pg,\n                    pay_method,\n                    merchant_uid,\n                    name,\n                    amount,\n                    buyer_name,\n                    buyer_tel,\n                    buyer_email,\n                    escrow,\n                };\n\n                if (pay_method === \"vbank\") {\n                    data.vbank_due = vbank_due;\n                    if (pg === \"danal_tpay\") {\n                        data.biz_num = biz_num;\n                    }\n                }\n                if (pay_method === \"card\") {\n                    if (card_quota !== 0) {\n                        data.digital = {\n                            card_quota: card_quota === 1 ? [] : card_quota,\n                        };\n                    }\n                }\n                if (pay_method === \"phone\") {\n                    data.digital = digital;\n                }\n\n                if (isReactNative()) {\n                    /* 리액트 네이티브 환경일때 */\n                    const params = {\n                        userCode,\n                        data,\n                        type: \"payment\", // 결제와 본인인증을 구분하기 위한 필드\n                    };\n                    const paramsToString = JSON.stringify(params);\n                    window.ReactNativeWebView.postMessage(paramsToString);\n                } else {\n                    /* 웹 환경일때 */\n                    const { IMP } = window;\n                    IMP.init(userCode);\n                    IMP.request_pay(data, callback);\n                }\n            }\n        });\n    }\n\n    function callback(response) {\n        const query = queryString.stringify(response);\n        history.push(`/payment/result?${query}`);\n    }\n\n    function onChangePg(value) {\n        /* 결제수단 */\n        const methods = getMethods(value);\n        setMethods(methods);\n        setFieldsValue({ pay_method: methods[0].value });\n\n        /* 할부개월수 설정 */\n        const { pay_method } = getFieldsValue();\n        handleQuotas(value, pay_method);\n\n        /* 사업자번호/입금기한 설정 */\n        let isBizNumRequired = false;\n        let isVbankDueRequired = false;\n        if (pay_method === \"vbank\") {\n            if (value === \"danal_tpay\") {\n                isBizNumRequired = true;\n            }\n            isVbankDueRequired = true;\n        }\n        setisBizNumRequired(isBizNumRequired);\n        setIsVbankDueRequired(isVbankDueRequired);\n    }\n\n    function onChangePayMethod(value) {\n        const { pg } = getFieldsValue();\n        let isQuotaRequired = false;\n        let isDigitalRequired = false;\n        let isVbankDueRequired = false;\n        let isBizNumRequired = false;\n        switch (value) {\n            case \"card\": {\n                isQuotaRequired = true;\n                break;\n            }\n            case \"phone\": {\n                isDigitalRequired = true;\n                break;\n            }\n            case \"vbank\": {\n                if (pg === \"danal_tpay\") {\n                    isBizNumRequired = true;\n                }\n                isVbankDueRequired = true;\n                break;\n            }\n            default:\n                break;\n        }\n        setIsQuotaRequired(isQuotaRequired);\n        setIsDigitalRequired(isDigitalRequired);\n        setIsVbankDueRequired(isVbankDueRequired);\n        setisBizNumRequired(isBizNumRequired);\n\n        /* 할부개월수 설정 */\n        handleQuotas(pg, value);\n    }\n\n    function handleQuotas(pg, pay_method) {\n        const { isQuotaRequired, quotas } = getQuotas(pg, pay_method);\n        setIsQuotaRequired(isQuotaRequired);\n        setQuotas(quotas);\n        setFieldsValue({ card_quota: quotas[0].value });\n    }\n\n    function isReactNative() {\n        /*\n      리액트 네이티브 환경인지 여부를 판단해\n      리액트 네이티브의 경우 IMP.payment()를 호출하는 대신\n      iamport-react-native 모듈로 post message를 보낸다\n\n      아래 예시는 모든 모바일 환경을 리액트 네이티브로 인식한 것으로\n      실제로는 user agent에 값을 추가해 정확히 판단해야 한다\n    */\n        if (ua.mobile) return true;\n        return false;\n    }\n\n    return (\n        <Wrapper>\n            <Header>JINPIL 웹뷰 결제 테스트</Header>\n            <FormContainer onSubmit={handleSubmit}>\n                <Item label=\"PG사\">\n                    {getFieldDecorator(\"pg\", {\n                        initialValue: \"html5_inicis\",\n                    })(\n                        <Select\n                            size=\"large\"\n                            onChange={onChangePg}\n                            suffixIcon={<Icon type=\"caret-down\" />}\n                        >\n                            {PGS.map((pg) => {\n                                const { value, label } = pg;\n                                return (\n                                    <Option value={value} key={value}>\n                                        {label}\n                                    </Option>\n                                );\n                            })}\n                        </Select>\n                    )}\n                </Item>\n                <Item label=\"결제수단\">\n                    {getFieldDecorator(\"pay_method\", {\n                        initialValue: \"card\",\n                    })(\n                        <Select\n                            size=\"large\"\n                            onChange={onChangePayMethod}\n                            suffixIcon={<Icon type=\"caret-down\" />}\n                        >\n                            {methods.map((method) => {\n                                const { value, label } = method;\n                                return (\n                                    <Option value={value} key={value}>\n                                        {label}\n                                    </Option>\n                                );\n                            })}\n                        </Select>\n                    )}\n                </Item>\n                {isQuotaRequired && (\n                    <Item label=\"할부개월수\">\n                        {getFieldDecorator(\"card_quota\", {\n                            initialValue: 0,\n                        })(\n                            <Select\n                                size=\"large\"\n                                suffixIcon={<Icon type=\"caret-down\" />}\n                            >\n                                {quotas.map((quota) => {\n                                    const { value, label } = quota;\n                                    return (\n                                        <Option value={value} key={value}>\n                                            {label}\n                                        </Option>\n                                    );\n                                })}\n                            </Select>\n                        )}\n                    </Item>\n                )}\n                {isVbankDueRequired && (\n                    <Item>\n                        {getFieldDecorator(\"vbank_due\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"입금기한은 필수입력입니다\",\n                                },\n                            ],\n                        })(\n                            <Input\n                                size=\"large\"\n                                type=\"number\"\n                                addonBefore=\"입금기한\"\n                                placeholder=\"YYYYMMDDhhmm\"\n                            />\n                        )}\n                    </Item>\n                )}\n                {isBizNumRequired && (\n                    <Item>\n                        {getFieldDecorator(\"biz_num\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"사업자번호는 필수입력입니다\",\n                                },\n                            ],\n                        })(\n                            <Input\n                                size=\"large\"\n                                type=\"number\"\n                                addonBefore=\"사업자번호\"\n                            />\n                        )}\n                    </Item>\n                )}\n                {isDigitalRequired && (\n                    <Item label=\"실물여부\" className=\"toggle-container\">\n                        {getFieldDecorator(\"digital\", {\n                            valuePropName: \"checked\",\n                        })(<Switch />)}\n                    </Item>\n                )}\n                <Item label=\"에스크로\" className=\"toggle-container\">\n                    {getFieldDecorator(\"escrow\", {\n                        valuePropName: \"checked\",\n                    })(<Switch />)}\n                </Item>\n                <Item>\n                    {getFieldDecorator(\"name\", {\n                        initialValue: \"진필 주문서 테스트\",\n                        rules: [\n                            {\n                                required: true,\n                                message: \"주문명은 필수입력입니다\",\n                            },\n                        ],\n                    })(<Input size=\"large\" addonBefore=\"주문명\" />)}\n                </Item>\n                <Item>\n                    {getFieldDecorator(\"amount\", {\n                        initialValue: \"39000\",\n                        rules: [\n                            {\n                                required: true,\n                                message: \"결제금액은 필수입력입니다\",\n                            },\n                        ],\n                    })(\n                        <Input\n                            size=\"large\"\n                            type=\"number\"\n                            addonBefore=\"결제금액\"\n                        />\n                    )}\n                </Item>\n                <Item>\n                    {getFieldDecorator(\"merchant_uid\", {\n                        initialValue: `min_${new Date().getTime()}`,\n                        rules: [\n                            {\n                                required: true,\n                                message: \"주문번호는 필수입력입니다\",\n                            },\n                        ],\n                    })(<Input size=\"large\" addonBefore=\"주문번호\" />)}\n                </Item>\n                <Item>\n                    {getFieldDecorator(\"buyer_name\", {\n                        initialValue: \"홍길동\",\n                        rules: [\n                            {\n                                required: true,\n                                message: \"구매자 이름은 필수입력입니다\",\n                            },\n                        ],\n                    })(<Input size=\"large\" addonBefore=\"이름\" />)}\n                </Item>\n                <Item>\n                    {getFieldDecorator(\"buyer_tel\", {\n                        initialValue: \"01012341234\",\n                        rules: [\n                            {\n                                required: true,\n                                message: \"구매자 전화번호는 필수입력입니다\",\n                            },\n                        ],\n                    })(\n                        <Input\n                            size=\"large\"\n                            type=\"number\"\n                            addonBefore=\"전화번호\"\n                        />\n                    )}\n                </Item>\n                <Item>\n                    {getFieldDecorator(\"buyer_email\", {\n                        initialValue: \"example@example.com\",\n                        rules: [\n                            {\n                                required: true,\n                                message: \"구매자 이메일은 필수입력입니다\",\n                            },\n                        ],\n                    })(<Input size=\"large\" addonBefore=\"이메일\" />)}\n                </Item>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    결제하기\n                </Button>\n            </FormContainer>\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n    padding: 5rem 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n`;\n\nconst Header = styled.div`\n    font-weight: bold;\n    text-align: center;\n    padding: 2rem;\n    padding-top: 0;\n    font-size: 3rem;\n`;\n\nconst FormContainer = styled(Form)`\n    width: 350px;\n    border-radius: 3px;\n\n    .ant-row {\n        margin-bottom: 1rem;\n    }\n    .ant-form-item {\n        display: flex;\n        align-items: center;\n    }\n    .ant-col.ant-form-item-label {\n        padding: 0 11px;\n        width: 9rem;\n        text-align: left;\n        label {\n            color: #888;\n            font-size: 1.2rem;\n        }\n        & + .ant-col.ant-form-item-control-wrapper {\n            width: 26rem;\n            .ant-form-item-control {\n                line-height: inherit;\n            }\n        }\n    }\n    .ant-col.ant-form-item-label > label::after {\n        display: none;\n    }\n    .ant-row.ant-form-item.toggle-container .ant-form-item-control {\n        padding: 0 11px;\n        height: 4rem;\n        display: flex;\n        align-items: center;\n        .ant-switch {\n            margin: 0;\n        }\n    }\n\n    .ant-form-explain {\n        margin-top: 0.5rem;\n        margin-left: 9rem;\n    }\n\n    .ant-input-group-addon:first-child {\n        width: 9rem;\n        text-align: left;\n        color: #888;\n        font-size: 1.2rem;\n        border: none;\n        background-color: inherit;\n    }\n    .ant-input-group > .ant-input:last-child {\n        border-radius: 4px;\n    }\n\n    .ant-col {\n        width: 100%;\n    }\n\n    button[type=\"submit\"] {\n        width: 100%;\n        height: 5rem;\n        font-size: 1.6rem;\n        margin-top: 2rem;\n    }\n`;\n\nconst PaymentForm = Form.create({ name: \"payment\" })(Payment);\n\nexport default withUserAgent(withRouter(PaymentForm));\n","import {\n  METHODS,\n  METHOD_FOR_CARD,\n  METHOD_FOR_PHONE,\n  METHOD_FOR_VBANK,\n  METHODS_FOR_INICIS,\n  METHODS_FOR_UPLUS,\n  METHODS_FOR_KCP,\n  METHODS_FOR_MOBILIANS,\n  METHODS_FOR_DANAL,\n  QUOTAS,\n  QUOTAS_FOR_INICIS_AND_KCP,\n} from './constants';\n\nexport function getMethods(pg) {\n  switch (pg) {\n    case 'html5_inicis': return METHODS_FOR_INICIS;\n    case 'kcp': return METHODS_FOR_KCP;\n    case 'uplus': return METHODS_FOR_UPLUS;\n    case 'kcp_billing':\n    case 'kakaopay':\n    case 'kakao':\n    case 'paypal':\n    case 'smilepay':\n      return METHOD_FOR_CARD;\n    case 'danal':\n      return METHOD_FOR_PHONE;\n    case 'danal_tpay':\n      return METHODS_FOR_DANAL;\n    case 'mobilians':\n      return METHODS_FOR_MOBILIANS;\n    case 'settle':\n      return METHOD_FOR_VBANK;\n    default: return METHODS;\n  }  \n} \n\nexport function getQuotas(pg, method) {\n  if (method === 'card') {\n    switch (pg) {\n      case 'html5_inicis':\n      case 'kcp':\n        return { isQuotaRequired: true, quotas: QUOTAS_FOR_INICIS_AND_KCP };\n      default:\n        return { isQuotaRequired: true, quotas: QUOTAS };\n    }\n  }\n  return { isQuotaRequired: false, quotas: QUOTAS };\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Icon, Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nfunction PaymentResult({ history }) {\n  const { location } = history;\n  const { search } = location;\n  const query = queryString.parse(search);\n  \n  const { merchant_uid, error_msg, imp_uid } = query;\n  const isSuccessed = getIsSuccessed();\n  function getIsSuccessed() {\n    const { success, imp_success } = query;\n    if (typeof imp_success === 'string') return imp_success === 'true';\n    if (typeof imp_success === 'boolean') return imp_success === true;\n    if (typeof success === 'string') return success === 'true';\n    if (typeof success === 'boolean') return success === true;\n  }\n\n  const iconType = isSuccessed ? 'check-circle' : 'exclamation-circle';\n  const resultType = isSuccessed ? '성공' : '실패';\n  const colorType = isSuccessed ? '#52c41a' : '#f5222d';\n  return (\n    <Wrapper>\n      <Container colorType={colorType}>\n        <Icon type={iconType} theme=\"filled\" />\n        <p>{`결제에 ${resultType}하였습니다`}</p>\n        <ul>\n          <li>\n            <span>주문번호</span>\n            <span>{merchant_uid}</span>\n          </li>\n          {isSuccessed  ? (\n            <li>\n              <span>아임포트 번호</span>\n              <span>{imp_uid}</span>\n            </li>\n          ) : (\n            <li>\n              <span>에러 메시지</span>\n              <span>{error_msg}</span>\n            </li>\n          )}\n        </ul>\n        <Button size=\"large\" onClick={() => history.push('/')}>\n          <Icon type=\"arrow-left\" />\n          돌아가기\n        </Button>\n      </Container>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #fff;\n  border-radius: 4px;\n  position: absolute;\n  top: 2rem;\n  left: 2rem;\n  right: 2rem;\n  bottom: 2rem;\n  padding: 2rem;\n\n  > .anticon {\n    font-size: 10rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    color: ${props => props.colorType};\n  }\n  p {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 2rem;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin-bottom: 3rem;\n\n    li {\n      display: flex;\n      line-height: 2;\n      span:first-child {\n        width: 8rem;\n        color: #888;\n      }\n      span:last-child {\n        width: calc(100% - 8rem);\n        color: #333;\n      }\n    }\n  }\n\n  button, button:hover {\n    border-color: ${props => props.colorType};\n    color: ${props => props.colorType};\n  }\n  button:hover {\n    opacity: 0.7;\n  }\n`;\n\nexport default withRouter(PaymentResult);","import React from 'react';\nimport styled from 'styled-components';\nimport { Form, Input, Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport { withUserAgent } from 'react-useragent';\nimport queryString from 'query-string';\n\nconst { Item } = Form;\n\nfunction Certification({ history, form, ua }) {\n  const { getFieldDecorator, validateFieldsAndScroll } = form;\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    \n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        /* 가맹점 식별코드 */\n        const userCode = 'imp10391932';\n        /* 결제 데이터 */\n        const {\n          merchant_uid,\n          name,\n          phone,\n          min_age,\n        } = values;\n\n        const data = {\n          merchant_uid,\n        };\n\n        if (name) {\n          data.name = name;\n        }\n        if (phone) {\n          data.phone = phone;\n        }\n        if (min_age) {\n          data.min_age = min_age;\n        }\n\n        if (isReactNative()) {\n          /* 리액트 네이티브 환경일때 */\n          const params = {\n            userCode,\n            data,\n            type: 'certification', // 결제와 본인인증을 구분하기 위한 필드\n          };\n          const paramsToString = JSON.stringify(params);\n          window.ReactNativeWebView.postMessage(paramsToString);\n        } else {\n          /* 웹 환경일때 */\n          const { IMP } = window;\n          IMP.init(userCode);\n          IMP.certification(data, callback);\n        }\n      }\n    });\n  }\n\n  /* 본인인증 후 콜백함수 */\n  function callback(response) {\n    const query = queryString.stringify(response);\n    history.push(`/certification/result?${query}`);\n  }\n\n  function isReactNative() {\n    /*\n      리액트 네이티브 환경인지 여부를 판단해\n      리액트 네이티브의 경우 IMP.certification()을 호출하는 대신\n      iamport-react-native 모듈로 post message를 보낸다\n\n      아래 예시는 모든 모바일 환경을 리액트 네이티브로 인식한 것으로\n      실제로는 user agent에 값을 추가해 정확히 판단해야 한다\n    */\n    if (ua.mobile) return true;\n    return false;\n  }\n\n  return (\n    <Wrapper>\n      <Header>아임포트 본인인증 테스트</Header>\n      <FormContainer onSubmit={handleSubmit}>\n        <Item>\n          {getFieldDecorator('merchant_uid', {\n            initialValue: `min_${new Date().getTime()}`,\n            rules: [{ required: true, message: '주문번호는 필수입력입니다' }],\n          })(\n            <Input size=\"large\" addonBefore=\"주문번호\" />,\n          )}\n        </Item>\n        <Item>\n          {getFieldDecorator('name')(\n            <Input size=\"large\" addonBefore=\"이름\" />,\n          )}\n        </Item>\n        <Item>\n          {getFieldDecorator('phone')(\n            <Input size=\"large\" type=\"number\" addonBefore=\"전화번호\" />,\n          )}\n        </Item>\n        <Item>\n          {getFieldDecorator('min_age')(\n            <Input\n              size=\"large\"\n              type=\"number\"\n              addonBefore=\"최소연령\"\n              placeholder=\"허용 최소 만 나이\"\n            />,\n          )}\n        </Item>\n        <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n          본인인증하기\n        </Button>\n      </FormContainer>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  padding: 7rem 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  font-weight: bold;\n  text-align: center;\n  padding: 2rem;\n  padding-top: 0;\n  font-size: 3rem;\n`;\n\nconst FormContainer = styled(Form)`\n  width: 350px;\n  border-radius: 3px;\n\n  .ant-row {\n    margin-bottom: 1rem;\n  }\n  .ant-form-item {\n    display: flex;\n    align-items: center;\n  }\n  .ant-col.ant-form-item-label > label::after {\n    display: none;\n  }\n\n  .ant-form-explain {\n    margin-top: 0.5rem;\n    margin-left: 9rem;\n  }\n\n  .ant-input-group-addon:first-child {\n    width: 9rem;\n    text-align: left;\n    color: #888;\n    font-size: 1.2rem;\n    border: none;\n    background-color: inherit;\n  }\n  .ant-input-group > .ant-input:last-child {\n    border-radius: 4px;\n  }\n\n  .ant-col {\n    width: 100%;\n  }\n\n  button[type='submit'] {\n    width: 100%;\n    height: 5rem;\n    font-size: 1.6rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst CertificationForm = Form.create({ name: 'certification' })(Certification);\n\nexport default withUserAgent(withRouter(CertificationForm));\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Icon, Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nfunction CertificationResult({ history }) {\n  const { location } = history;\n  const { search } = location;\n  const query = queryString.parse(search);\n\n  const { merchant_uid, error_msg, imp_uid } = query;\n  const isSuccessed = getIsSuccessed();\n  function getIsSuccessed() {\n    const { success, } = query;\n    if (typeof success === 'string') return success === 'true';\n    if (typeof success === 'boolean') return success === true;\n  }\n\n  const iconType = isSuccessed ? 'check-circle' : 'exclamation-circle';\n  const resultType = isSuccessed ? '성공' : '실패';\n  const colorType = isSuccessed ? '#52c41a' : '#f5222d';\n  return (\n    <Wrapper>\n      <Container colorType={colorType}>\n        <Icon type={iconType} theme=\"filled\" />\n        <p>{`본인인증에 ${resultType}하였습니다`}</p>\n        <ul>\n          <li>\n            <span>주문번호</span>\n            <span>{merchant_uid}</span>\n          </li>\n          {isSuccessed  ? (\n            <li>\n              <span>아임포트 번호</span>\n              <span>{imp_uid}</span>\n            </li>\n          ) : (\n            <li>\n              <span>에러 메시지</span>\n              <span>{error_msg}</span>\n            </li>\n          )}\n        </ul>\n        <Button size=\"large\" onClick={() => history.push('/')}>\n          <Icon type=\"arrow-left\" />\n          돌아가기\n        </Button>\n      </Container>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #fff;\n  border-radius: 4px;\n  position: absolute;\n  top: 2rem;\n  left: 2rem;\n  right: 2rem;\n  bottom: 2rem;\n  padding: 2rem;\n\n  > .anticon {\n    font-size: 10rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    color: ${props => props.colorType};\n  }\n  p {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 2rem;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin-bottom: 3rem;\n\n    li {\n      display: flex;\n      line-height: 2;\n      span:first-child {\n        width: 8rem;\n        color: #888;\n      }\n      span:last-child {\n        width: calc(100% - 8rem);\n        color: #333;\n      }\n    }\n  }\n\n  button, button:hover {\n    border-color: ${props => props.colorType};\n    color: ${props => props.colorType};\n  }\n  button:hover {\n    opacity: 0.7;\n  }\n`;\n\nexport default withRouter(CertificationResult);","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Home from './Home';\nimport Payment from './Payment';\nimport PaymentResult from './PaymentResult';\nimport Certification from './Certification';\nimport CertificationResult from './CertificationResult';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/payment\" component={Payment} />\n      <Route exact path=\"/payment/result\" component={PaymentResult} />\n      <Route exact path=\"/certification\" component={Certification} />\n      <Route exact path=\"/certification/result\" component={CertificationResult} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}